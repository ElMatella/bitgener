const { createWriteStream } = require('fs');
const sharp = require('sharp');
const bitgener = require('../../lib');

const wstream = createWriteStream('sharp.png');

/**
 * Generic function to convert the svg generated from Bitgener
 * into the specified format and get the specified output.
 * Please note that no verification is made in this function.
 * @param  {Buffer} buffer  The buffer generated by Bitgener.
 * @param  {Number} density The density needed to resize the image with no
 *                          image quality loss.
 * @param  {String} format  Format could be one of png, jpeg,
 *                          webp, tiff, raw supported by Sharp.
 * @param  {String} method  Method could be one of toFile, toBuffer,
 *                          or a Readable Stream returned by default by Sharp.
 * @return {Promise}        A Readable Stream, a Buffer, ... depending on
 *                          the method.
 */
const convert = async function convert({
  buffer,
  density,
  format,
  method,
  file,
} = {}) {
  // sharp it!
  const sharped = sharp(buffer, { density });
  let ret;

  if (method === 'toFile') {
    ret = await sharped.toFile(file);
  } else if (method === 'toBuffer') {
    ret = sharped.toFormat(format).toBuffer();
  } else {
    // return a sharp/streamable object
    ret = sharped[format]();
  }

  return ret;
};

// then use it in an async function
(async () => {
  try {
    const {
      svg: buffer,
      density,
    } = await bitgener({
      data: 'Bitgener',
      type: 'datamatrix',
      output: 'buffer',
      encoding: 'utf8',
      rectangular: true,
      padding: 0,
      width: 250,
      height: 250,
      original2DSize: false,
      color: '#FFFFFF',
      bgColor: '#F7931A',
      hri: {
        show: true,
        fontFamily: 'Courier New',
        fontSize: 15,
        marginTop: 0,
      },
    });

    const rstream = await convert({
      buffer,
      density,
      format: 'png',
    });

    rstream.pipe(wstream);

    // listen to rstream and wstream events ;)

    // ...
  } catch (e) {
    console.error(e.toString());
  }
})();
